# selecting subsets of data, according to their values
library(dplyr)
library(tidyverse) #this has a lot more stuff than what we mainly need
install.packages("tidyverse")
library(tidyverse) #this has a lot more stuff than what we mainly need
# selecting subsets of data, according to their values
library(dplyr)
filter(y, trap_id > 43) #select in your rows BUt by value and not position
# or
y %>% filter(trap_id > 43)
filter(y, trap_id > 43 & occasion < 20)
filter(y, trap_id < 5 | trap_id > 65) #add criteria to same column
arrange(y, trap_id)
select(y, chip, trap_id)
y %>%
select(chip, trap_id) %>% #gotta repeat pipe %>% to tell R to keep it up
filter(trap_id > 65) %>%
arrange(trap_id)
# summarizing data within groups
names(y)
y$age
y %>% group_by(age)
y %>% group_by(age) %>% summarise(mean.w = mean(na.omit(weight_g)))
summarise(mean.w = mean(na.omit(weight_g)))
y$sex
y %>% group_by(age, sex) %>% summarise(mean.w = mean(na.omit(weight_g)))
gc()
sample(x = 1:6, size = 5, replace = FALSE)
sample(x = 1:6, size = 20, replace = TRUE)
d1 <- RollDie(n = 50)
RollDie <- function(n) sample(1:6, n, replace = TRUE) #makes rolldie a function
d1 <- RollDie(n = 50)
sum(d1 == 6)
sum(d1 == 6)/50
d1 <- RollDie(n = 50)
hist(d1)
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
sims <- vector("list", 500)
probs <- vector("numeric", 500)
for (n in 1:500) {
sims[[n]] <- RollDie(n)
probs[n] <- sum(sims[[n]] == 6)/n
}
plot(probs)
abline(h=1/6)
plot(probs)
abline(h=1/6)
abline(h=1/6,)
abline(h=1/6,a=NULL,b=NULL,v=NULL,reg=NULL,coef=NULL,untf=FALSE)
plot(probs)
y <- read.csv("data/captures.csv",sep=";")
y <- na.omit(y[,c("age", "sex")])
y <- read.csv("data/captures.csv",sep=";")
y <- na.omit(y[,c("age", "sex")])
library(dplyr)
y %>%
group_by(age) %>%
summarise(n = n()) %>% #n() just counts the events (in this case it counts the amounts f captures)
y %>%
group_by(age) %>%
summarise(n = n())
y %>%
group_by(age) %>%
summarise(n = n()) %>% #n() just counts the events (in this case it counts the amounts f captures)
y %>%
group_by(age) %>%
summarise(n = n()) %>%
age.marginal.df <-
y %>%
group_by(age) %>%
summarise(n = n()) %>%
age.marginal.df <-
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
age.marginal.df <-
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
age.marginal.df
y %>%
group_by(sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
sex.marginal.df <-
y %>%
group_by(sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
sex.marginal.df
joint.df <-
y %>%
group_by(age, sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df
sex.marginal.df <-
y %>%
group_by(sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df <-
y %>%
group_by(age, sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df <-
y %>%
group_by(age, sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df
joint.prob <-
joint.df %>%
filter(age == "A", sex == "F") %>%
.$prop
joint.prob
marg.prob <-
age.marginal.df %>%
filter(age == "A") %>%
.$prop
marg.prob
cond.prob <- joint.prob/marg.prob
cond.prob
# Read captures.csv (name it 'captures')
captures<-read.csv("data/captures.csv")
class("captures")
class(captures)
dim(captures)
# Check the dimensions of captures
?dim()
captures
# Read captures.csv (name it 'captures')
captures<-read.csv("data/captures.csv")
class(captures)
dim(captures)
captures
# Read captures.csv (name it 'captures')
captures<-read.csv("data/captures.csv",sep=";")
captures
y
captures
dim(captures)
class(captures)
# View the column names of captures
?names()
name(captures)
names(captures)
# Check the structure of captures
str(captures)
# View a summary of captures
summary(captures)
# Print captures to the console
captures
# View the first 6 rows
head(captures)
# View the first 15 rows
head(captures,15)
# View the last 6 rows
tail(captures)
# View the last 10 rows
tail(captures,10)
# Produce an histogram of weight
hist(captures$weight_g)
# Plot the capture ID no. towards the DOY
plot(x=captures$DOY, y=captures$capture_id)
# install.packages("dplyr") # run this line only if the package is not yet installed
library(dplyr) # load the package
library(tidyverse)
# install.packages("dplyr") # run this line only if the package is not yet installed
library(dplyr) # load the package
# Transform the weight of the animals using the function log
log(captures$weight_g)
# Divide weight by the foot length and save the new variable as wfratio
wfratio <- captures$weight_g/captures$footlength_mm
# add the column wfratio to the captures data frame, creating a new data frame called captures.new
captures.new <- cbind(captures, wfratio) # using R base function `cbind`
?cbind
captures %>%
mutate(wfratio = weight_g/footlength_mm) -> captures.new
head(captures.new)
# remove the data frame captures.new from the working environment
rm(captures.new)
# now add both the log of the weight and the column wfratio to the captures data frame, creating again new data frame called captures.new
captures %>%
mutate(logw = log(weight_g),
wfratio = weight_g/footlength_mm) -> captures.new
head(captures.new)
# DO IT ON YOUR OWN - ADD ANOTHER VARIABLE TO THE DATA FRAME, E.G. YEAR + 1
captures %>%
mutate(wrongyear=year+1)->captures.new
head(captures.new)
rm(captures.new)
# filter data selecting only weights < 25
filter(captures, weight_g == 25)
# filter data selecting only weights < 25
filter(captures, weight_g < 25)
# filter data selecting only weights < 25
filter(captures, weight_g == 25)
# filter data selecting only weights < 25, but not... really, it gives me weight = to 25
filter(captures, weight_g = 25)
# filter data selecting only weights < 25, but not... really, it gives me weight = to 25
filter(captures, weight_g == 25)
# filter data selecting only weights < 25
filter(captures, weight_g< 25)
# filter data selecting only weights < 25 or > 40
filter(captures, weight_g < 25 | weight_g > 40)
# filter data selecting only weights > 40 and foot length > 18
filter(captures, footlength_mm > 18 & weight_g > 40)
# filter data selecting only weights < 25
filter(captures$weight_g<25)
# filter data selecting only weights < 25
filter(captures, weight_g<25)
# filter data selecting only weights < 25 or > 40
filter(captures, weight_g<25 | weight_g>40)
# filter data selecting only weights > 40 and foot length > 18
filter(captures, weight_g>40 & footlenght_mm>18)
# filter data selecting only weights > 40 and foot length > 18
filter(captures, weight_g>40 & footlength_mm>18)
# DO IT ON YOUR OWN - SELECT ONLY CAPTURES RECORDED AFTER DOY 210
filter(captures, DOY>210)
# SELECT ONLY CAPTURES RECORDED IN JULY
filter(captures, month==7)
# select columns by name
captures %>%
select(weight_g, sex, age, footlength_mm)
# select all columns between weight and age
captures %>%
select(weight_g:age)
# select all columns except dawn
captures %>%
select(-(dawn))
# select all columns except those from animal_id to furmark
captures %>%
select(-(animal_id:furmark))
# select columns from weight_g to footlenght_mm, excluding reproductive status
captures %>%
select(weight_g:footlength_mm) %>%
select(-repr_status)
captures %>%
group_by(sex) %>%
summarise(mean(weight_g, na.rm=TRUE))
summarise(mean.w = (mean(na.omit(weight_g)))
# DO IT ON YOUR OWN - CALCULATE THE MEAN TAKING INTO ACCOUNT THE AGE CLASS
# DO IT ON YOUR OWN - CALCULATE THE MEAN TAKING INTO ACCOUNT THE AGE CLASS
captures %>%
# DO IT ON YOUR OWN - CALCULATE THE MEAN TAKING INTO ACCOUNT THE AGE CLASS
captures %>%
group_by(age) %>%
summarise(mean.w = (mean(na.omit(weight_g))))
captures %>%
group_by(age, sex) %>%
summarise(mean(weight_g, na.rm=TRUE))
captures %>%
group_by(age, sex) %>%
summarise(mw = mean(weight_g, na.rm=TRUE), mf = mean(footlength_mm, na.rm=TRUE))
# or:
captures %>%
group_by(sex) %>%
summarise(mean(weight_g, na.rm=TRUE)) %>%
ungroup()
# sort the weigth of the animals
sort(captures$weight_g)
sort(captures$weight_g, decreasing = TRUE)
captures %>%
arrange(weight_g)
captures %>%
arrange(desc(weight_g))
# DO IT ON YOUR OWN - ARRANGE THE DATA FRAME ACCORDING TO FOOT LEGTH, BOTH IN ASCENDING AND DESCENDING ORDER
captures %>%
arrange(footlength_mm)
# DO IT ON YOUR OWN - ARRANGE THE DATA FRAME ACCORDING TO FOOT LEGTH, BOTH IN ASCENDING AND DESCENDING ORDER
captures %>%
arrange(desc(footlength_mm))
# DO IT ON YOUR OWN
?arrange
captures %>%
group_by(age)
# DO IT ON YOUR OWN
?arrange
captures %>%
group_by(age) %>%
arreange(weigth_g, .by_group =TRUE)
captures %>%
group_by(age) %>%
arrange(weigth_g, .by_group =TRUE)
captures %>%
group_by(age) %>%
arrange(weight_g, .by_group =TRUE)
# order according to weight and then to footlenght
captures %>%
arrange(desc(weight_g), footlength_mm)
library(Rmisc)
install.packages("Rmisc")
library(Hmisc)
install.packages("Hmisc")
library(ggplot2)
library(boot)
dati <- read.csv("data/captures.csv", sep=";")
CI(dati$weight_g, ci=0.95)
CI(na.omit(dati$weight_g), ci=0.95)
library(Rmisc)
library(Rmisc)
library(Hmisc)
library(ggplot2)
library(boot)
CI(dati$weight_g, ci=0.95)
CI(na.omit(dati$weight_g), ci=0.95)
dati2 <- na.omit(dati)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
dati2 <- na.omit(dati)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli <- group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=weight_g.mean, colour=sex)) +
geom_errorbar(aes(ymin=weight_g.lower, ymax=weight_g.upper), width=.1) +
geom_line() +
geom_point()
intervalli <- group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
CI(na.omit(dati$footlength_mm), ci=0,95)
CI(na.omit(dati$footlength_mm), ci=0.95)
CI(dati2$footlength_mm, ci=0.95)
CI(na.omit(dati$footlength_mm), ci=0.95)
CI(dati2$footlength_mm, ci=0.95)
dati2 <- na.omit(dati)
CI(dati2$footlength_mm, ci=0.95)
CI(na.omit(dati$footlength_mm), ci=0.95)
names(dati2)
intervalli <- group.CI(footlength_mm ~ sex,
data= dati2,
ci=0.95)
intervalli <- group.CI(footlength_mm ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=footlength_mm.mean, colour=sex)) +
geom_errorbar(aes(ymin=footlength_mm.lower, ymax=footlength_mm.upper), width=.1) +
geom_line() +
geom_point()
intervalli
ggplot(intervalli, aes(x=sex, y=footlength_mm.mean, colour=sex)) +
geom_errorbar(aes(ymin=footlength_mm.lower, ymax=footlength_mm.upper), width=.1) +
geom_line() +
geom_point()
variablile <- dati2$footlength_mm
intervalli <- group.CI(variablile ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=variablile.mean, colour=sex)) +
geom_errorbar(aes(ymin=variablile.lower, ymax=variablile.upper), width=.1) +
geom_line() +
geom_point()
boot.data <- boot(dati2$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
library(tidyverse)
dati2 %>%
filter(sex == "F") -> datiF
dati2 %>%
filter(sex == "M") -> datiM
dataset<-datiF
boot.data <- boot(dataset$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
d
dati2 %>%
filter(sex == "M") -> datiM
dataset<-datiF
boot.data <- boot(dataset$weight_g,
function(x,i) mean(x[i]),
R=10000)
library(dplyr)
captures <- read.csv("data/captures.csv", sep=";")
captures %>%
filter(age=="A") -> adults
head(adults)
adults %>%
group_by(animal_id, sex) -> grouped
grouped %>%
arrange(animal_id)
grouped %>%
summarise(count=n(), individual.weight = mean(weight_g, na.rm = TRUE)) -> ind.w
ind.w
#?qqplot
qqnorm(ind.w$individual.weight); qqline(ind.w$individual.weight, col="red")
shapiro.test(ind.w$individual.weight)
t.test(ind.w$individual.weight, mu = 30)
t.test(ind.w$individual.weight, mu = 30)
library(dplyr)
captures <- read.csv("data/captures.csv", sep=";")
captures %>%
filter(age=="A") -> adults
head(adults)
t.test(ind.w$individual.weight, mu = 30)
adults %>%
group_by(animal_id, sex) -> grouped
grouped %>%
arrange(animal_id)
grouped %>%
summarise(count=n(), individual.weight = mean(weight_g, na.rm = TRUE)) -> ind.w
ind.w
t.test(ind.w$individual.weight, mu = 30)
## is the weight of females and males different?
# we use again the summarise dplyr function
ind.w %>%
group_by(sex) %>%
summarise(count=n(), class.weight = mean(individual.weight, na.rm = TRUE))
# again, if you could not install dplyr, use the following code
# tapply(ind.w$individual.weight, ind.w$sex, mean, na.rm = TRUE)
# We can see the difference in weight that we observe between males and females
w.f <- (subset(ind.w, sex=="F"))$individual.weight
w.m <- (subset(ind.w, sex=="M"))$individual.weight
## is the weight of females and males different?
# we use again the summarise dplyr function
ind.w %>%
group_by(sex) %>%
summarise(count=n(), class.weight = mean(individual.weight, na.rm = TRUE))
# again, if you could not install dplyr, use the following code
# tapply(ind.w$individual.weight, ind.w$sex, mean, na.rm = TRUE)
# We can see the difference in weight that we observe between males and females
w.f <- (subset(ind.w, sex=="F"))$individual.weight
w.m <- (subset(ind.w, sex=="M"))$individual.weight
# we use again the summarise dplyr function
ind.w %>%
group_by(sex) %>%
summarise(count=n(), class.weight = mean(individual.weight, na.rm = TRUE))
# We can see the difference in weight that we observe between males and females
w.f <- (subset(ind.w, sex=="F"))$individual.weight
w.m <- (subset(ind.w, sex=="M"))$individual.weight
w.f
w.m
w.f
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.m); qqline(w.m, col="red")
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
shapiro.test(w.f)
shapiro.test(w.m)
var(w.f, na.rm = T)
var(w.m, na.rm = T)
var.test(w.f,w.m)
var(w.f, na.rm = T)
var(w.m, na.rm = T)
var.test(w.f,w.m)
var(w.f, na.rm = T)/var(w.m, na.rm = T)
boxplot(ind.w$individual.weight ~ ind.w$sex)
# ?t.test
t.test(w.f, w.m,
var.equal = TRUE,
paired = FALSE,
alternative = "two.sided") # greater/less
x <- c(3, 0, 5, 2, 5, 5, 5, 4, 4, 5)
y <- c(2, 1, 4, 1, 4, 3, 3, 2, 3, 5)
# homogeneity of variances
var.test(x,y)
# t-test
#t-test
t.test(x,y,
paired = TRUE,
var.equal = TRUE,
alternative = "two.sided")
library(readr)
captures <- read_csv("data/captures.csv")
View(captures)
library(readr)
captures <- read_delim("data/captures.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(captures)
