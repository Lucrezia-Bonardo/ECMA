# Esp.tr,
family=binomial, data=dati.mod.new)
#, offset=Noccasioni)
summary(fm2)
par(mfrow=c(1,2))
termplot(fm2, se=TRUE, col.term = "red", col.se = "grey",
ylabs = rep("odds ratio",2),
main = c("Alt","Mean diam"), cex.main = 0.7)
par(mfrow=c(1,1))
library(popbio)
logi.hist.plot(dati.mod.new$Alt,dati.mod.new$CattSiNo,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(dati.mod.new$media.rocce,dati.mod.new$CattSiNo,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(dati.mod.new$Esp.tr,dati.mod.new$CattSiNo,boxp=FALSE,type="hist",col="gray")
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
logit2prob(coef(fm2))
predict.alt <- predict(fm2,
data.frame(Alt=dati.mod.new$Alt,
media.rocce=mean(dati.mod.new$media.rocce)),
type = "response")
tab <- data.frame(Alt=dati.mod.new$Alt,
prob = predict.alt)
# tab
library(dplyr)
arrange(tab, Alt)
plot(arrange(tab, Alt))
library(sjPlot)
plot_model(fm2, type = "pred")#prova type="eff" se non si blocca
library(sjPlot)
#plot_model(fm2, type = "pred")#prova type="eff" se non si blocca
plot_model(fm2, type = "eff", terms = c("Alt"))
plot_model(fm2, type = "pred")#prova type="eff" se non si blocca
# plot_model(fm2, type = "pred")#prova type="eff" se non si blocca
plot_model(fm2, type = "eff", terms = c("Alt"))
mod <- lm(weight ~ group, data = plant.df)
sand <- c(6,10,8,6,14,17,9,11,7,11)
clay <- c(17,15,3,11,14,12,12,8,10,13)
loam <- c(13,16,9,12,15,16,17,13,18,14)
dati <- data.frame(sand,clay,loam)
dati
colMeans(dati)
boxplot(dati)
soil.type <- c(rep("sand",10),
rep("clay",10),
rep("loam",10))
yields <- c(sand, clay, loam)
dati.new <- data.frame(soil.type, yields)
dati.new
by(dati.new$yields, dati.new$soil.type, var)
anova(lm(yields ~ soil.type, data=dati.new))
plot(anova.yields)
by(dati.new$yields, dati.new$soil.type, var)
plot(anova.yields)
anova(lm(yields ~ soil.type, data=dati.new))
sand <- c(6,10,8,6,14,17,9,11,7,11)
clay <- c(17,15,3,11,14,12,12,8,10,13)
loam <- c(13,16,9,12,15,16,17,13,18,14)
dati <- data.frame(sand,clay,loam)
dati
colMeans(dati)
boxplot(dati)
soil.type <- c(rep("sand",10),
rep("clay",10),
rep("loam",10))
yields <- c(sand, clay, loam)
dati.new <- data.frame(soil.type, yields)
dati.new
by(dati.new$yields, dati.new$soil.type, var)
anova.yields <- aov(yields ~ soil.type, data=dati.new)
summary(anova.yields)
plot(anova.yields)
fligner.test(yields ~ soil.type, data=dati.new)
dati.relevel <- dati.new
dati.relevel$soil.type <- relevel(dati.relevel$soil.type, ref="sand")
read.csv("swimming_pools.csv", sep=";")
dir("data")
read.csv("swimming_pools.csv", sep=";")
dir("data")
y <- read.csv("data/swimming_pools.csv", sep=";")
y <- read.csv("data/swimming_pools.csv")
str(y)
# Import swimming_pools.csv correctly: pools
pools <- read.csv("data/swimming_pools.csv", stringsAsFactors = FALSE)
# Check the structure of pools
str(pools)
# Option A
pools <- read.csv("swimming_pools.csv", stringsAsFactors = TRUE)
dir(data)
dir("data")
h<-read.csv("data/hotdogs.csv", sep=";")
head(h)
h<-read.csv("data/hotdogs.csv", sep="/")
head(h)
?read.csv
h<-read.csv("data/hotdogs.csv", quote="")
head(h)
h<-read.csv("data/hotdogs.csv", sep=";", quote="")
head(h)
?read.csv
h<-read.csv("data/hotdogs.csv", sep="\")
h<-read.csv("data/hotdogs.csv", sep="\")
h<-read.csv("data/hotdogs.csv", sep="\t")
head(h)
# Select the hot dog with the least calories: lily
lily <- hotdogs[which.min(hotdogs$calories), ]
hotdogs<-read.csv("data/hotdogs.csv", sep="\t")
# Select the hot dog with the least calories: lily
lily <- hotdogs[which.min(hotdogs$calories), ]
lily
sample(x = 1:6, size = 5, replace = FALSE) #replace false means you can get the same value ONE time only
sample(x = 1:6, size = 20, replace = TRUE)
sample(x = 1:6, size = 20, replace = TRUE) # you get different numbers
sample(x = 1:6, size = 20, replace = TRUE) # again
RollDie <- function(n) sample(1:6, n, replace = TRUE) #makes rolldie a function
d1 <- RollDie(n = 50)
sum(d1 == 6) #how many times does six show up?
sum(d1 == 6)/50
hist(d1)
hist(d1)
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
sample(x = 1:6, size = 5, replace = FALSE) #replace false means you can get the same value ONE time only
sample(x = 1:6, size = 20, replace = TRUE)
sample(x = 1:6, size = 20, replace = TRUE) # you get different numbers
sample(x = 1:6, size = 20, replace = TRUE) # again
RollDie <- function(n) sample(1:6, n, replace = TRUE) #makes rolldie a function
d1 <- RollDie(n = 50)
sum(d1 == 6) #how many times does six show up?
sum(d1 == 6)/50
hist(d1)
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
?hist
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
hist(d1)
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
sims <- vector("list", 500)
probs <- vector("numeric", 500)
for (n in 1:500) {
sims[[n]] <- RollDie(n)
probs[n] <- sum(sims[[n]] == 6)/n
}
plot(probs)
abline(h=1/6)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
x <- c(15, 10, 13, 7, 9, 8, 21, 9, 14, 8)
y <- c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
qqnorm(y); qqline(y, col="red")
# with the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# homogeneity of variances
var(x)/var(y)
var.test(x,y)
#t-test
t.test(x,y,
paired = FALSE,
var.equal = TRUE,
alternative = "two.sided")
# non parametric test
wilcox.test(x,y,
paired = FALSE,
alternative = "two.sided")
x <- c(3, 0, 5, 2, 5, 5, 5, 4, 4, 5)
y <- c(2, 1, 4, 1, 4, 3, 3, 2, 3, 5)
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
qqnorm(y); qqline(y, col="red")
# with the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# homogeneity of variances
var.test(x,y)
# t-test
#t-test
t.test(x,y,
paired = TRUE,
var.equal = TRUE,
alternative = "two.sided")
t.test(x,y, var.equal=T)
x <- c(15,10,13,7, 9,8,21,9,14,8)
y <-  c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
t.test(x,y, var.equal=T)
wilcox.test(x,y, var.equal=T)
# non parametric test
?wilcox.test
wolcox.test(x,y, paired=T, var.equal=T, alternative="two.sided")
wilcox.test(x,y, paired=T, var.equal=T, alternative="two.sided")
library(dplyr)
## chi2 - goodness of fit test
freq <- c(22, 21, 22, 27, 22, 36)
probs <- rep(1/6, 6)
chisq.test(freq, p = probs)
## chi2 - test of independence
yesbelt <- c(12813, 647, 359, 42)
nobelt <- c(65963, 4000, 2642, 303)
chisq.test(data.frame(yesbelt, nobelt))
data.frame(yesbelt, nobelt)
rowSums(data.frame(yesbelt, nobelt))
colSums(data.frame(yesbelt, nobelt))
# for the first cell
78776*13861/sum(data.frame(yesbelt, nobelt))
# for the whole dataframe
n = sum(data.frame(yesbelt, nobelt))
data.frame(yesbelt, nobelt) %>%
mutate(somma.riga = rowSums(data.frame(yesbelt, nobelt)),
e.yesbelt = somma.riga*sum(yesbelt)/n,
e.nobelt = somma.riga*sum(nobelt)/n)
# compare with the values calculated by R
chisq.test(data.frame(yesbelt, nobelt))$exp
chisq.test(data.frame(yesbelt, nobelt))
## chi2 - test of independence
yesbelt <- c(12813, 647, 359, 42)
nobelt <- c(65963, 4000, 2642, 303)
chisq.test(data.frame(yesbelt, nobelt))
names(chisq.test(data.frame(yesbelt, nobelt)))
## chi2 - test of homogeneity
die.fair <- sample(1:6, 200, p=c(1,1,1,1,1,1)/6, replace = TRUE)
die.bias <- sample(1:6, 200, p=c(0.5,0.5,1,1,1,2)/6, replace = TRUE)
res.fair <- table(die.fair)
res.bias <- table(die.bias)
rbind(res.fair, res.bias)
chisq.test(rbind(res.fair, res.bias))
freq <- c(53, 22, 49)
probs <- c(5/12, 3/12, 4/12)
chisq.test(freq, p = probs)
Xsq$observed   # observed counts (same as M)
r1 <- c(3,1)
r2 <- c(1,0)
chisq.test(data.frame(r1,r2)) -> Xsq
Xsq$observed   # observed counts (same as M)
Xsq$expected
Xsq
Xsq$observed   # observed counts (same as M)
Xsq$expected
birds_habitats <- data.frame(
species = c("Ruby-crowed kinglet", "White-crowned sparrow", "Lincoln's sparrow",
"Golgen-crowded sparrow", "Bushtit", "Song sparrow", "Spotted towhee",
"Bewick's wren", "Hermit thrush", "Dard-eyed junco",
"Lesser goldfinch", "Uncommon"),
Remnant = c(677, 408, 270, 300, 198, 150, 137, 106, 119, 34, 57, 457),
Restored = c(198, 260, 187, 89, 91, 50, 32, 48, 24, 39, 15, 125)
)
birds_habitats
chisq.test(data.frame(birds_habitats$Remnant, birds_habitats$Restored))
u <- data.frame(yesbelt, nobelt)
u
res.fair
y<-rbind(res.fair, res.bias)
y
yesbelt
die.fair
res.fair
y
names(chisq.test(rbind(res.fair, res.bias)))
u
Xsq$observed   # observed counts (same as M)
Xsq$expected
Xsq$residuals
?chisq.test
growth = c(12, 10, 8, 11, 6, 7, 2, 3.5, 3.5)
tannin = 0:8
plot(growth ~ tannin)
abline(coef(lm.result), lwd=2, col="red")
lm.result <- lm(growth ~ tannin)
summary(lm.result)
plot(growth ~ tannin)
abline(coef(lm.result), lwd=2, col="red")
t = (-1.1583 - (-1.5))/0.2236
pt(t, 7, lower.tail = FALSE)
?pt
pt(t, 7, lower.tail = FALSE) #7=degrees of freedom, lower.tail=F check if it is larger (lower.tail=T check if it is same or less)
?confint
confint(lm.result) #confidence intervals (at 95%)
# ?cars
summary(cars)
cars.lm <- lm(dist ~ speed, data = cars)
names(cars.lm)
coef(cars.lm)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red", lwd=2)
summary(cars.lm)
?plot
plot(dist ~ speed, data = cars, pch = 16)
plot(dist ~ speed, data = cars)
cars.lm <- lm(dist ~ speed, data = cars, pch=16)
# ?cars
summary(cars)
cars.lm <- lm(dist ~ speed, data = cars)
names(cars.lm)
coef(cars.lm)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red", lwd=2)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red", lwd=2)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red", lwd=2)
summary(cars.lm)
-17.58 + 3.93 * (8) # point estimate
cars[5,] # real data
fitted(cars.lm)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
predict(cars.lm, newdata = data.frame(speed = c(6,8,21)))
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(c(6,8,21),
predict(cars.lm, newdata = data.frame(speed = c(6,8,21))),
col="blue", pch=19)
residuals(cars.lm)
# Residual standard error
carsumry <- summary(cars.lm)
carsumry$sigma
summary(cars.lm)
confint(cars.lm)
# new <- data.frame(speed = c(5,6,21))
# predict(cars.lm, newdata = new, interval = "confidence")
# predict(cars.lm, newdata = new, interval = "prediction")
library(HH)
ci.plot(cars.lm)
# or
# library(UsingR)
# simple.lm(cars$speed, cars$dist, show.ci=TRUE)
x = c(18, 23, 25, 35, 65, 54, 34, 56, 72, 19, 23, 42, 18, 39, 37)
y = c(202, 186, 187, 180, 156, 169, 174, 172, 153, 199, 193, 174, 198, 183, 178)
lm(y ~ x) # the basic values of the regression analysis
lm.result = lm(y ~ x)
summary(lm.result)
plot(x,y, xlim=c(0,80), ylim=c(150,240)) # make a plot
plot(x,y, xlim=c(0,80), ylim=c(150,240)) # make a plot
abline(coef(lm.result)) #lm(y ~ x)) # plot the regression line
# to see only some parts of the result
coef(lm.result)
summary(resid(lm.result))
x = c(18, 23, 25, 35, 65, 54, 34, 56, 72, 19, 23, 42, 18, 39, 37)
y = c(202, 186, 187, 180, 156, 169, 174, 172, 153, 199, 193, 174, 198, 183, 178)
lm(y ~ x) # the basic values of the regression analysis
lm.result = lm(y ~ x)
summary(lm.result)
plot(x,y, xlim=c(0,80), ylim=c(150,240)) # make a plot
abline(coef(lm.result)) #lm(y ~ x)) # plot the regression line
# to see only some parts of the result
coef(lm.result)
summary(resid(lm.result))
# COMMENTED LINES - CALCULATIONS BY HAND, YOU CAN SKIP THEM AND USE THE OUTPUT OF THE REGRESSION ANALYSIS
# n = length(x)
# es = resid(lm.result)
# b1 = coef(lm.result)[[2]]
# s = sqrt(sum(es^2)/(n-2)) # S^2 = SSE/(n-2), s is the residual standard error
# SE = s/sqrt(sum((x-mean(x))^2)) # SE
b1 = -0.79773
SE = 0.06996
t = (b1-(-1))/SE # (obs. value - hyp.value)/SE
t
pt(t, 13, lower.tail = FALSE) # FIND THE RIGHT TAIL FOR THIS VALUE OF t AND 15-2 df
pt(t, 13, lower.tail = FALSE) # FIND THE RIGHT TAIL FOR THIS VALUE OF t AND 15-2 df
# COMMENTED LINES - CALCULATIONS BY HAND, YOU CAN SKIP THEM AND USE THE OUTPUT OF THE REGRESSION ANALYSIS
# SE.b0 = s*(sqrt((1/n)+(mean(x)^2/sum((x-mean(x))^2)))) # formula for the standard error of the intercept
SE.b0 = 2.86694
b0 = coef(lm.result)[[1]]
t = (b0 - 220)/SE.b0
t
pt(t, 13, lower.tail = TRUE) # FIND THE LEFT TAIL FOR THIS VALUE OF t AND 15-2 df
t = (-1.1583 - (-1.5))/0.2236 #slope 1 (tannin_estimate) - slope 2/ tannin_error given by lm
pt(t, 7, lower.tail = FALSE) #7=degrees of freedom, lower.tail=F check if it is larger (lower.tail=T check if it is same or less)
?pt
data(cars)
cars.lm <- lm(dist ~ speed, data = cars)
coef(cars.lm)
names(cars.lm)
residuals(cars.lm)
residuals(cars.lm)
par(mfrow=c(1,3))
hist(residuals(cars.lm))
boxplot(residuals(cars.lm))
qqnorm(residuals(cars.lm))
qqline(residuals(cars.lm))
par(mfrow=c(1,1))
plot(cars.lm)
# install.packages("lmtest")
library(lmtest)
dwtest(cars.lm, alternative = "two.sided")
cars[23,]
dim(cars)
dim(cars[-23,])
cars[-23,]
dim(cars[-23,])
shapiro.test(residuals(cars.lm))
shapiro.test(residuals(cars.lm))
library(lmtest)
bptest(cars.lm)
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
a
bctrans
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
?boxcox
which(bctrans$y==max(bctrans$y))
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
which(bctrans$y==max(bctrans$y))
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
data("trees")
mod <- lm(Volume ~ Girth + Height, data=trees)
summary(mod)
Volume.tr <- trees$Volume^0.30
mod.tr <- lm(Volume.tr ~ Girth + Height, data=trees)
summary(mod.tr)
plot(Volume ~ Girth, data=trees)
mod.q <- lm(Volume ~ Girth + I(Girth^2) + Height + I(Height^2), data=trees)
summary(mod.q)
mod.q <- lm(Volume ~ Girth + I(Girth^2) + Height , data=trees)
summary(mod.q)
mod.int <- lm(Volume ~ Girth * Height, data=trees)
summary(mod.int)
plot(mod)
mod <- lm(Volume ~ Girth + Height, data=trees)
plot(mod)
plot(trees$Volume ~ trees$Girth)
plot(trees$Volume ~ trees$Height)
library(sjPlot)
# plot_model(mod)
plot_model(mod)
plot_model(mod, type = "eff", terms = "Girth")
plot_model(mod, type = "eff", terms = "Height")
plot_model(mod.int, type = "eff", terms = "Height")
plot_model(mod.int, type = "int", terms = c("Height","Girth")) # # type = "int" automatically selects groups for continuous moderator variables
library(jtools)
effect_plot(mod.int, pred = Girth, interval = TRUE)
plot_model(mod.int, type = "pred", terms = c("Girth", "Height [60,80]"))
# switch moderator
plot_model(mod.int, type = "pred", terms = c("Height", "Girth"))
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
which(bctrans$y==max(bctrans$y))
bctrans$x[58]
bctrans$x[62]
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans$x[62]
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 40))
which(bctrans$y==max(bctrans$y))
bctrans
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
knitr::opts_chunk$set(echo = TRUE)
trees$Tall <- cut(trees$Height, breaks = c(-Inf, 76, Inf),
labels = c("no", "yes"))
trees$Tall[1:5]
class(trees$Tall)
treesdummy.lm <- lm(Volume ~ Girth + Tall, data = trees)
summary(treesdummy.lm)
# # we split the trees data into
# # two pieces, with groups determined by the Tall variable:
treesTall <- split(trees, trees$Tall)
# # we add the Fitted values to each
# # piece via predict
treesTall[["yes"]]$Fit <- predict(treesdummy.lm, treesTall[["yes"]])
treesTall[["no"]]$Fit <- predict(treesdummy.lm, treesTall[["no"]])
# # we set up a plot for the variables Volume versus Girth
# # but we do not
# # plot anything yet (type = n) because we want to use different symbols for the two groups
plot(Volume ~ Girth, data = trees, type = "n")
# # we add points to the plot for the Tall = yes trees and use an open circle for a plot character
# # (pch = 1), followed by points for the Tall = no trees with a triangle character (pch = 2).
points(Volume ~ Girth, data = treesTall[["yes"]], pch = 1)
plot(Volume ~ Girth, data = trees, type = "n")
# # we add points to the plot for the Tall = yes trees and use an open circle for a plot character
# # (pch = 1), followed by points for the Tall = no trees with a triangle character (pch = 2).
points(Volume ~ Girth, data = treesTall[["yes"]], pch = 1)
points(Volume ~ Girth, data = treesTall[["no"]], pch = 2)
plot(Volume ~ Girth, data = trees, type = "n")
# # we add points to the plot for the Tall = yes trees and use an open circle for a plot character
# # (pch = 1), followed by points for the Tall = no trees with a triangle character (pch = 2).
points(Volume ~ Girth, data = treesTall[["yes"]], pch = 1)
points(Volume ~ Girth, data = treesTall[["no"]], pch = 2)
# # we add regression lines to the plot, one for each group
lines(Fit ~ Girth, data = treesTall[["yes"]])
lines(Fit ~ Girth, data = treesTall[["no"]])
plot(Volume ~ Girth, data = trees)
abline(a = -34, b = 4.69, col="red") # alberi bassi
abline(a = -30, b = 4.69, col="blue") # alberi alti
